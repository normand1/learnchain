name: Build Binaries

on:
  workflow_dispatch:  # Manual trigger
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.1.0

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: learnchain-darwin-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: learnchain-darwin-x64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: learnchain-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: learnchain-win32-x64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/learnchain.exe dist/${{ matrix.binary_name }}
          else
            cp target/${{ matrix.target }}/release/learnchain dist/${{ matrix.binary_name }}
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.binary_name }}
          path: dist/${{ matrix.binary_name }}
          if-no-files-found: error

  create-release:
    name: Create Release with Binaries
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-artifacts

      - name: Prepare dist directory
        run: |
          mkdir -p dist
          find dist-artifacts -type f -exec cp {} dist/ \;
          ls -lh dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          draft: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
